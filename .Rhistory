ifelse(p >= 0.1, ">= 0.1",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), sep="")))))
} else{
p <- ifelse(p < .001, "< .001***",
ifelse(p < .01, "< .01**",
ifelse(p < .05, "< .05*",
ifelse(p >= 0.1, ">= 0.1",
paste("= ", substring(as.character(format(round(p, 2), nsmall=2)), 2), "Â°", sep="")))))
}
return(p)
}
round_p(p)
round_p(0.07)
round_p(0.04)
round_p(0.02)
round_p(0.005)
source("format_p.R")
APAze <- function(fit, method="boot", nsim=1000, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
# coefs$p <- round(p_list,3)
#
#   p <- ifelse(coefs$p < .001, "< .001",
#               ifelse(coefs$p < .01, "< .01",
#                      ifelse(coefs$p < .05, "< .05",
#                             ifelse(coefs$p >= 1.00, ">= 1.00",
#                             paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
coefs$p <- format_p(p_list)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
coefs$p <- round(p_list,3)
p <- ifelse(coefs$p < .001, "< .001",
ifelse(coefs$p < .01, "< .01",
ifelse(coefs$p < .05, "< .05",
ifelse(coefs$p >= 1.00, ">= 1.00",
paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
library(neuropsychology)
library(lmerTest)
fit_lmer <- lme4::lmer(Age~BMI + (1|Sex), data=personality)
fit_lmertest <- lmerTest::lmer(Age~BMI + (1|Sex), data=personality)
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
APAze(lm(Age~BMI,data=personality))
APAze <- function(fit, method="boot", nsim=1000, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
# coefs$p <- round(p_list,3)
#
#   p <- ifelse(coefs$p < .001, "< .001",
#               ifelse(coefs$p < .01, "< .01",
#                      ifelse(coefs$p < .05, "< .05",
#                             ifelse(coefs$p >= 1.00, ">= 1.00",
#                             paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
#     coefs$p <- round(p_list,3)
#
#     p <- ifelse(coefs$p < .001, "< .001",
#                 ifelse(coefs$p < .01, "< .01",
#                        ifelse(coefs$p < .05, "< .05",
#                               ifelse(coefs$p >= 1.00, ">= 1.00",
#                                      paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
APAze(lm(Age~BMI,data=personality))
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
library(neuropsychology)
APAze(glm(Age~Mood_Disorder,data=personality))
APAze(lm(Age~BMI,data=personality))
library(lmerTest)
fit_lmer <- lme4::lmer(Age~BMI + (1|Sex), data=personality)
fit_lmertest <- lmerTest::lmer(Age~BMI + (1|Sex), data=personality)
APAze(fit_lmer, method="Wald")
APAze(fit_lmertest, method="Wald")
round_p(0.06)
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R/tests/testthat")
install.packages("devtools")
library("devtools")
install_github("neuropsychology/neuropsychology.R", dependencies=TRUE)
library(neuropsychology)
citation("neuropsychology")
describe(personality)
figure <- assess(87, mean=100, sd=15)
assess(87, mean=100, sd=15)
APAze(glm(Age~Mood_Disorder,data=personality))
APAze(lm(Age~BMI,data=personality))
APAze <- function(fit, method="boot", nsim=1000, add.stars=TRUE, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
# coefs$p <- round(p_list,3)
#
#   p <- ifelse(coefs$p < .001, "< .001",
#               ifelse(coefs$p < .01, "< .01",
#                      ifelse(coefs$p < .05, "< .05",
#                             ifelse(coefs$p >= 1.00, ">= 1.00",
#                             paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list, add.stars=add.stars)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"|class(fit)[1]=="glm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
#     coefs$p <- round(p_list,3)
#
#     p <- ifelse(coefs$p < .001, "< .001",
#                 ifelse(coefs$p < .01, "< .01",
#                        ifelse(coefs$p < .05, "< .05",
#                               ifelse(coefs$p >= 1.00, ">= 1.00",
#                                      paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list, add.stars=add.stars)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
APAze(glm(Age~Mood_Disorder,data=personality))
APAze(lm(Age~BMI,data=personality))
fit <- glm(Age~Mood_Disorder,data=personality)
confint(fit)
summary(fit)
data.frame(coef(summary(fit)))
coefs <- data.frame(coef(summary(fit)))
confint <- confint(fit)
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
p_list
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
coefs
p <- format_p(p_list, add.stars=add.stars)
add.stars=TRUE
p <- format_p(p_list, add.stars=add.stars)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
varsnames <- all.vars(terms(fit))
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
varsnames[1]
summary(fit)
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
summary(fit)$AIC
a <- summary(fit)
a$aic
R2_appa <- paste("AIC =",as.character(fit$aic))
apa <- c(R2_apa, apa)
R2_apa <- paste("AIC =",as.character(fit$aic))
apa <- c(R2_apa, apa)
apa
APAze <- function(fit, method="boot", nsim=1000, add.stars=TRUE, ddf=NULL){
varsnames <- all.vars(terms(fit))
# lme4 and lmerTest -----------------------------------------------------------------
if(class(fit)[1]=="lmerMod" | class(fit)[1]=="merModLmerTest"){
R2 <- MuMIn::r.squaredGLMM(fit)
confint <- confint(fit, method=method, nsim=nsim, oldNames=F)
# It would be nice to have this to automatically switch to Wald estimation
# of confint in the case of eventual warnings. But I have no idea how
# to catch those...
if(!is.null(ddf) & inherits(fit, "merModLmerTest")){
coefs <- data.frame(coef(summary(fit, ddf=ddf)))
}else{
coefs <- data.frame(coef(summary(fit)))
}
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
if(inherits(fit, "glmerMod")){
p_list <- coefs$Pr...z..
} else if("Pr...t.." %in% colnames(coefs)){
p_list <- coefs$Pr...t..
}else{
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
}
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value","z.value"))]
coefs <- round(coefs,2)
# coefs$p <- round(p_list,3)
#
#   p <- ifelse(coefs$p < .001, "< .001",
#               ifelse(coefs$p < .01, "< .01",
#                      ifelse(coefs$p < .05, "< .05",
#                             ifelse(coefs$p >= 1.00, ">= 1.00",
#                             paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list, add.stars=add.stars)
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" successfully converged and explained ",
substring(as.character(format(round(R2[2], 2), nsmall=2)), 3),
"% of the variance of the endogen (the conditional R2). ",
"The variance explained by the fixed effects was of ",
substring(as.character(format(round(R2[1], 2), nsmall=2)), 3),
"% (the marginal R2) and the one explained by the random effects of ",
substring(as.character(format(round(R2[2]-R2[1], 2), nsmall=2)), 3),
"%.", sep="")
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}
# Else --------------------------------------------------------------------
else if(class(fit)[1]=="lm"|class(fit)[1]=="glm"){
confint <- confint(fit)
coefs <- data.frame(coef(summary(fit)))
coefs$CI25 <- tail(confint,nrow(coefs))[,1]
coefs$CI75 <- tail(confint,nrow(coefs))[,2]
p_list <- 2 * (1 - pnorm(abs(coefs$t.value)))
coefs <- coefs[,!(names(coefs) %in% c("Std..Error","t.value"))]
coefs <- round(coefs,2)
#     coefs$p <- round(p_list,3)
#
#     p <- ifelse(coefs$p < .001, "< .001",
#                 ifelse(coefs$p < .01, "< .01",
#                        ifelse(coefs$p < .05, "< .05",
#                               ifelse(coefs$p >= 1.00, ">= 1.00",
#                                      paste("= ", substring(as.character(format(round(coefs$p, 2), nsmall=2)), 2), sep="")))))
p <- format_p(p_list, add.stars=add.stars)
if(class(fit)[1]=="lm"){
R2_apa <- paste("The overall model predicting ",
varsnames[1],
" explained ",
substring(as.character(format(round(summary(fit)$r.squared, 2), nsmall=2)), 3),
"% of the variance of the endogen (R2).", sep="")
}else{R2_apa <- paste("AIC =",as.character(round(fit$aic, 2)))}
apa <- paste(
paste(rownames(coefs), ": ", sep=""),
paste("(beta = ", as.character(coefs$Estimate), ",", sep=""),
paste(" 95% CI [", as.character(coefs$CI25), ", ", sep=""),
paste("", as.character(coefs$CI75), "]", sep=""),
paste(", p ", p, ")", sep=""),
sep=""
)
apa <- c(R2_apa, apa)
return(apa)
}else{
print(paste("Function not available yet for object of class", class(fit)[1]))
}
}
fit <- glm(Age~Mood_Disorder,data=personality)
APAze(fit)
fit <- lm(Age~BMI,data=personality)
APAze(fit)
library(neuropsychology)
library(neuropsychology)
textcloud <- function(pdf.file=".",
words=NULL,
frequency=NULL,
word.length.min=4,
word.length.max=Inf,
freq.min=10,
freq.max=Inf,
image="brain1",
text.size=0.5){
if(is.null(words)==FALSE){
data <- data.frame(word=words)
if(is.null(frequency)){
data$freq <- 1
}else{
data$freq <- frequency
}
}else if(is.null(pdf.file)==FALSE){
data <- extract_text(pdf.file)
}else{
print("No correct input. Check ?textcloud")
}
if(is.null(image)==FALSE){
png::writePNG(neuropsychology::masks[[image]], "img.png")
}
cloud <- wordcloud2::wordcloud2(data=data,
size=text.size,
figPath="img.png")
if(is.null(image)==FALSE){
unlink("img.png")
}
return(cloud)
}
textcloud(words=c("here", "is", "some", "random", "words"))
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/neuropsychology.R")
setwd("D:/Programs/Dropbox/RECHERCHE/DOCUMENTS/R_packages/datasets")
library(png)
head2 <- readPNG("head.png")
brain2 <- readPNG("brain.png")
head1 <- readPNG("head2.png")
brain1 <- readPNG("brain2.png")
masks <- list("brain1"=brain1, "brain2"=brain2, "head1"=head1, "head2"=head2)
save(masks, file="masks.rda", compress="bzip2")
install.packages("Rtools")
install.packages(BayesFactor)
install.packages("BayesFactor")
sessionInfo()
library(BayesFactor)
sessionInfo()
install.packages("digest")
